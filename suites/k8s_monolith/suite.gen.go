// Code generated by gotestmd DO NOT EDIT.
package k8s_monolith

import (
	"github.com/stretchr/testify/suite"

	"github.com/networkservicemesh/integration-tests/extensions/base"
	"github.com/networkservicemesh/integration-tests/suites/k8s_monolith/external_nsc"
	"github.com/networkservicemesh/integration-tests/suites/k8s_monolith/external_nse"
)

type Suite struct {
	base.Suite
	external_nscSuite external_nsc.Suite
	external_nseSuite external_nse.Suite
}

func (s *Suite) SetupSuite() {
	parents := []interface{}{&s.Suite}
	for _, p := range parents {
		if v, ok := p.(suite.TestingSuite); ok {
			v.SetT(s.T())
		}
		if v, ok := p.(suite.SetupAllSuite); ok {
			v.SetupSuite()
		}
	}
	s.RunIncludedSuites()
}
func (s *Suite) RunIncludedSuites() {
	runTest := func(subSuite suite.TestingSuite, suiteName, testName string, subtest func()) {
		type runner interface {
			Run(name string, f func()) bool
		}
		defer func() {
			if afterTestSuite, ok := subSuite.(suite.AfterTest); ok {
				afterTestSuite.AfterTest(suiteName, testName)
			}
			if tearDownTestSuite, ok := subSuite.(suite.TearDownTestSuite); ok {
				tearDownTestSuite.TearDownTest()
			}
		}()
		if setupTestSuite, ok := subSuite.(suite.SetupTestSuite); ok {
			setupTestSuite.SetupTest()
		}
		if beforeTestSuite, ok := subSuite.(suite.BeforeTest); ok {
			beforeTestSuite.BeforeTest(suiteName, testName)
		}
		// Run test
		subSuite.(runner).Run(testName, subtest)
	}
	s.Run("External_nsc", func() {
		s.external_nscSuite.SetT(s.T())
		s.external_nscSuite.SetupSuite()
		runTest(&s.external_nscSuite, "External_nsc", "TestKernel2Wireguard2Kernel", s.external_nscSuite.TestKernel2Wireguard2Kernel)
	})
	s.Run("External_nse", func() {
		s.external_nseSuite.SetT(s.T())
		s.external_nseSuite.SetupSuite()
		runTest(&s.external_nseSuite, "External_nse", "TestKernel2Wireguard2Kernel", s.external_nseSuite.TestKernel2Wireguard2Kernel)
	})
}
func (s *Suite) Test() {}
